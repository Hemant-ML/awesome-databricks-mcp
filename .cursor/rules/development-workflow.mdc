# Development Workflow

## üö® SIMPLIFIED DEVELOPMENT APPROACH üö®

**CRITICAL: Follow SIMPLE, MAINTAINABLE development patterns. NO over-engineering!**

### Development Philosophy
- **Direct development** over complex workflows
- **Simple commands** over sophisticated tooling
- **Immediate feedback** over complex debugging systems
- **Standard tools** over custom development utilities

## Essential Commands

### Core Development Commands
- `./setup.sh` - Interactive setup for environment, authentication, and dependencies
- `./watch.sh` - Start development servers (backend + frontend + file watching)
- `./fix.sh` - Format code (ruff for Python, prettier for TypeScript)
- `./deploy.sh` - Deploy to Databricks Apps
- `./app_status.sh` - Check deployment status and get app URLs

## Python Execution Rules

**CRITICAL: Always use `uv run` instead of direct `python`:**
```bash
# ‚úÖ CORRECT
uv run python script.py
uv run uvicorn server.app:app

# ‚ùå WRONG  
python script.py
uvicorn server.app:app
```

## Databricks CLI Rules

**CRITICAL: Always source environment before Databricks CLI:**
```bash
# ‚úÖ CORRECT - Load environment first
source .env.local && export DATABRICKS_HOST && export DATABRICKS_TOKEN && databricks current-user me

# ‚ùå WRONG - Direct CLI usage
databricks current-user me
```

## Development Workflow

### Starting Development
1. Run `./setup.sh` for first-time setup or configuration changes
2. Run `./watch.sh` to start development servers:
   - Backend: http://localhost:8000 (FastAPI + MCP server)
   - Frontend: http://localhost:5173 (React dev server)
   - MCP endpoint: http://localhost:8000/mcp/
   - API docs: http://localhost:8000/docs

### Making Changes
- **Tools**: Edit functions in `server/tools/*.py` modules
- **Prompts**: Add/edit markdown files in `prompts/` directory
- **Frontend**: Modify React components in `client/src/`
- **Backend**: Update FastAPI routes in `server/routers/`

All changes auto-reload via file watchers in `./watch.sh`.

### Package Management
- **Python**: Use `uv add/remove` for dependencies, never edit pyproject.toml manually
- **Frontend**: Use `bun add/remove` for dependencies, never edit package.json manually
- Always check if dependencies already exist before adding new ones
- **Principle**: Only add dependencies if absolutely critical

## Development Principles

### Keep It Simple
- **Direct file editing**: Edit files directly, no complex workflows
- **Immediate testing**: Test changes immediately with auto-reload
- **Simple debugging**: Use print statements and basic logging
- **NO complex debugging tools** or sophisticated development environments

### File Organization
- **One concept per file**: Each file should have a single, clear purpose
- **Direct imports**: Import exactly what you need, no complex import systems
- **Simple structure**: Keep file organization flat and obvious
- **NO complex file hierarchies** or sophisticated organization patterns

### Code Changes
- **Incremental changes**: Make small, focused changes
- **Immediate testing**: Test each change before moving on
- **Simple commits**: Commit changes with clear, simple messages
- **NO complex branching strategies** or sophisticated version control workflows

## Development Tools

### Essential Tools Only
- **Editor**: Use any editor that supports the project languages
- **Terminal**: Basic terminal for running commands
- **Browser**: For testing frontend and API endpoints
- **NO complex IDEs** or sophisticated development environments

### Testing Changes
- **Backend**: Check terminal output and API docs
- **Frontend**: Check browser console and network tab
- **MCP**: Use testing scripts in `claude_scripts/`
- **NO complex testing workflows** or sophisticated debugging tools

## Troubleshooting

### Common Issues
- **Authentication failures**: Run `databricks auth login` or check `.env.local` configuration
- **MCP connection issues**: Verify app deployment with `./app_status.sh`
- **TypeScript client not found**: Auto-generated by `./watch.sh`, check logs
- **Port conflicts**: Default ports 8000 (backend) and 5173 (frontend)

### Debug Commands
```bash
# Check development server logs
tail -f /tmp/databricks-app-watch.log

# Test Databricks connection
source .env.local && databricks current-user me

# Verify MCP endpoint
curl http://localhost:8000/mcp/

# Check Claude MCP integration
echo "What MCP prompts are available from databricks-mcp?" | claude
```

## Forbidden Development Patterns
‚ùå **Complex development workflows** or sophisticated tooling
‚ùå **Advanced debugging systems** or complex debugging tools
‚ùå **Sophisticated version control strategies** or complex branching
‚ùå **Custom development utilities** or complex development environments
‚ùå **Performance profiling** or sophisticated optimization tools
‚ùå **Enterprise development patterns** or complex development methodologies

## Required Development Patterns
‚úÖ **Simple file editing** with immediate testing
‚úÖ **Basic terminal commands** for development tasks
‚úÖ **Auto-reload development** with file watchers
‚úÖ **Simple debugging** with print statements and basic logging
‚úÖ **Direct package management** with uv and bun
‚úÖ **Immediate feedback** through auto-reload and simple testing

## Summary: What Makes Development "Senior Developer Approved"

‚úÖ **Readable**: Any developer can understand the workflow immediately
‚úÖ **Maintainable**: Simple patterns that are easy to follow
‚úÖ **Focused**: Each step has a single, clear purpose
‚úÖ **Direct**: No unnecessary complexity or indirection
‚úÖ **Practical**: Gets the job done without over-engineering

When in doubt, choose the **simpler** development approach. Your future self (and your teammates) will thank you.

description: Development workflow emphasizing simple, maintainable patterns over complex development systems
globs:
alwaysApply: false
---
