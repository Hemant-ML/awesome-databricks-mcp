# Project Overview

## üö® SIMPLIFIED DATABRICKS MCP SERVER üö®

**CRITICAL: This project has been deliberately simplified to prioritize maintainability and clarity.**

## Project Philosophy

This is a **simplified** Databricks MCP (Model Context Protocol) server that enables AI assistants like Claude to interact with Databricks workspaces. The project follows a **SIMPLE, MAINTAINABLE** approach:

- **Simple over Clever**: Write obvious code that any developer can understand
- **Explicit over Implicit**: Prefer clear, direct implementations over abstractions
- **Flat over Nested**: Avoid deep inheritance, complex factories, or excessive abstraction layers
- **Focused over Generic**: Write code for the specific use case, not hypothetical future needs

## Architecture

The simplified MCP server architecture consists of:
- **FastAPI backend** (`server/app.py`) with integrated MCP server via FastMCP
- **Modular tools system** (`server/tools/`) with specialized modules for different Databricks operations  
- **React frontend** (`client/`) for web-based MCP discovery and testing
- **MCP proxy** (`dba_mcp_proxy/`) for Claude CLI integration with OAuth handling
- **Prompts system** (`prompts/`) where markdown files become MCP prompts

## Core Components

### Backend (FastAPI + MCP)
- **Main App**: `server/app.py` - FastAPI application with integrated MCP server
- **Tools**: `server/tools/` - 100+ tools organized across 8 specialized modules
- **Routers**: `server/routers/` - API endpoints for frontend communication
- **Services**: `server/services/` - Business logic and external service integration

### Frontend (React + TypeScript)
- **Main App**: `client/src/App.tsx` - React application with routing
- **Pages**: `client/src/pages/` - Page-level components
- **Components**: `client/src/components/ui/` - Reusable UI components
- **API Client**: `client/src/fastapi_client/` - Auto-generated TypeScript client

### MCP Integration
- **MCP Server**: Integrated FastMCP server for Model Context Protocol
- **Proxy**: `dba_mcp_proxy/` for Claude CLI integration with OAuth
- **Testing**: `claude_scripts/` for comprehensive MCP testing

## Tool System Architecture

The modular tools system (`server/tools/`) is organized into specialized modules:
- `core.py` - Health checks and basic operations
- `sql_operations.py` - SQL warehouse and query tools
- `unity_catalog.py` - Unity Catalog operations (catalogs, schemas, tables)
- `jobs_pipelines.py` - Job and DLT pipeline management
- `dashboards.py` - Dashboard management tools
- `data_management.py` - DBFS and data operations
- `governance.py` - Governance tools

## Key Features

### Simplified Design
- **Direct implementations** over abstractions
- **Simple functions** over complex class hierarchies
- **Environment variables** over configuration objects
- **Standard library first** over custom utilities

### MCP Capabilities
- **100+ Databricks tools** for comprehensive workspace management
- **Dynamic prompt loading** from markdown files
- **OAuth integration** via Databricks Apps
- **Claude CLI integration** through MCP proxy

### Development Experience
- **Auto-reload development** with file watchers
- **Simple testing** with basic pytest setup
- **Immediate feedback** through development servers
- **Clear documentation** and examples

## What Makes This Project "Senior Developer Approved"

‚úÖ **Readable**: Any developer can understand the code immediately
‚úÖ **Maintainable**: Simple patterns that are easy to modify
‚úÖ **Focused**: Each module has a single, clear responsibility
‚úÖ **Direct**: No unnecessary abstractions or indirection
‚úÖ **Practical**: Solves the specific problem without over-engineering

## Forbidden Patterns

This project explicitly avoids:
‚ùå **Abstract base classes** or complex inheritance hierarchies
‚ùå **Factory patterns** or dependency injection containers
‚ùå **Decorators for cross-cutting concerns** (logging, caching, performance monitoring)
‚ùå **Complex configuration classes** with nested structures
‚ùå **Async/await patterns** unless absolutely necessary
‚ùå **Connection pooling** or caching layers
‚ùå **Generic "framework" code** or reusable utilities
‚ùå **Complex error handling systems** or custom exceptions
‚ùå **Performance optimization** patterns (premature optimization)
‚ùå **Enterprise patterns** like singleton, observer, strategy, etc.

## Required Patterns

This project always uses:
‚úÖ **Direct function calls** - no indirection or abstraction layers
‚úÖ **Simple classes** with clear, single responsibilities
‚úÖ **Environment variables** for configuration (no complex config objects)
‚úÖ **Explicit imports** - import exactly what you need
‚úÖ **Basic error handling** with try/catch and simple return dictionaries
‚úÖ **Straightforward control flow** - avoid complex conditional logic
‚úÖ **Standard library first** - only add dependencies when absolutely necessary

## Development Commands

### Essential Commands
- `./setup.sh` - Interactive setup for environment, authentication, and dependencies
- `./watch.sh` - Start development servers (backend + frontend + file watching)
- `./fix.sh` - Format code (ruff for Python, prettier for TypeScript)
- `./deploy.sh` - Deploy to Databricks Apps
- `./app_status.sh` - Check deployment status and get app URLs

### Python Execution Rules
**CRITICAL: Always use `uv run` instead of direct `python`:**
```bash
# ‚úÖ CORRECT
uv run python script.py
uv run uvicorn server.app:app

# ‚ùå WRONG  
python script.py
uvicorn server.app:app
```

### Databricks CLI Rules
**CRITICAL: Always source environment before Databricks CLI:**
```bash
# ‚úÖ CORRECT - Load environment first
source .env.local && export DATABRICKS_HOST && export DATABRICKS_TOKEN && databricks current-user me

# ‚ùå WRONG - Direct CLI usage
databricks current-user me
```

## Summary

This project demonstrates that **simple, maintainable code** is the hallmark of senior development. When in doubt, choose the **simpler** solution. Your future self (and your teammates) will thank you.

description: Project overview emphasizing simplified, maintainable architecture over complex abstractions
globs:
alwaysApply: false
---
